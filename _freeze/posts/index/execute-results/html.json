{
  "hash": "7c2d9123e88ce8cbc3e0fb4b66609ed4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"TidyTuesday: Retail Sales data analysis with Plotly in R\"\ndate: 01-2-2023 \nauthor: Nathan Bresette \ncategories: [code, analysis, visualization, plotly]\nimage: \"3d_pca.png\"\nabout:\n  template: jolla\n  image-width: 100px\n---\n\n---\ntitle: \"stat520_project\"\nauthor: \"Nathan Bresette\"\ndate: \"2024-04-12\"\noutput:\n  html_document:\n    df_print: paged\neditor_options:\n  chunk_output_type: inline\nformat:\n  html:\n    theme:\n      light: cosmo\n      dark: [cosmo, theme_dark_custom.scss]\n    code-link: true\n    code-fold: true\n    code-overflow: wrap\n    warning: false\n---\n\n\n#Clean Data\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(tidyverse)\nmerged_data <- read_excel(\"~/Desktop/merged_data.xlsx\")\n\nclean_data <- merged_data %>%\n  select(`Unnamed: 0_level_0 Rk`, `Win`, `Loss`, `DEFENSIVE SUMMARY Eff`, `DEFENSIVE SUMMARY 3P%`, `DEFENSIVE SUMMARY FG%`, `DEFENSIVE SUMMARY MR%`, `DEFENSIVE SUMMARY NP%`, FTR_2023, TO_2023, ORB_2023, DRB_2023, p3_2023, `2p_2023`, Pace_2023, TO_2023) %>%\n  rename(\n    Rank = `Unnamed: 0_level_0 Rk`,\n    `Def_Eff` = `DEFENSIVE SUMMARY Eff`,\n    `Def_3P` = `DEFENSIVE SUMMARY 3P%`,\n    `Def_FG` = `DEFENSIVE SUMMARY FG%`,\n    `Def_MR` = `DEFENSIVE SUMMARY MR%`,\n    `Def_NP` = `DEFENSIVE SUMMARY NP%`,\n    Off_FTR = FTR_2023,\n    Off_TO = TO_2023,\n    Off_ORB = ORB_2023,\n    Def_DRB = DRB_2023,\n    Off_3P = p3_2023,\n    Off_2P = `2p_2023`,\n    Pace = Pace_2023\n  ) %>% \n  mutate(Win = as.numeric(Win),\n         Loss = as.numeric(Loss)) \n\nclean_data$Rank_Category <- ifelse(clean_data$Rank >= 0 & clean_data$Rank <= 25, \"Ranked\",\n                                   ifelse(clean_data$Rank > 25 & clean_data$Rank <= 181, \"Top 50%\", \"Bottom 50%\"))\nclean_data <- clean_data %>%\n  mutate(Rank_Category = as.factor(Rank_Category))\n```\n:::\n\n\n#Exploratory Analysis\n\n##Check structure of data and summary statistics\n\n##Check NA values by column\n\n::: {.cell}\n\n```{.r .cell-code}\ncbind(lapply(lapply(clean_data, is.na), sum))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              [,1]\nRank          0   \nWin           0   \nLoss          0   \nDef_Eff       0   \nDef_3P        0   \nDef_FG        0   \nDef_MR        0   \nDef_NP        0   \nOff_FTR       0   \nOff_TO        0   \nOff_ORB       0   \nDef_DRB       0   \nOff_3P        0   \nOff_2P        0   \nPace          0   \nRank_Category 0   \n```\n\n\n:::\n:::\n\n\n##Corrplot\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(corrplot)\n\ncompute_and_plot_correlation <- function(data, threshold = 0.6) {\n  # Select numeric columns\n  numeric_data <- data[, sapply(data, is.numeric)]\n  \n  # Remove rows with missing values\n  numeric_data <- numeric_data[complete.cases(numeric_data), ]\n  \n  # Compute correlation matrix\n  correlation_matrix <- cor(numeric_data)\n  \n  # Find pairs of variables with correlation above or below the threshold\n  high_correlation_pairs <- which(abs(correlation_matrix) > threshold & upper.tri(correlation_matrix), arr.ind = TRUE)\n  \n  # Create scatter plots for high correlation pairs\n  plots <- list()\n  for (i in 1:nrow(high_correlation_pairs)) {\n    var_x <- rownames(correlation_matrix)[high_correlation_pairs[i, 1]]\n    var_y <- rownames(correlation_matrix)[high_correlation_pairs[i, 2]]\n    \n    plot <- ggplot(data = numeric_data, aes_string(x = var_x, y = var_y)) +\n      geom_point() +\n      labs(title = paste(\"Scatter Plot of\", var_y, \"vs\", var_x), x = var_x, y = var_y) + \n      theme_minimal() +\n      theme(plot.title = (element_text(hjust = 0.5)))\n\n    \n    plots[[paste(var_x, var_y, sep = \"_\")]] <- plot\n  }\n  \n  # Plot correlation matrix\n  corrplot(correlation_matrix, method = \"shade\", type = \"lower\", diag = FALSE, addCoef.col = \"black\", number.cex = 0.5)\n  \n  return(plots)\n}\n\n#Example call to function\nscatter_plots <- compute_and_plot_correlation(clean_data)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\nfor (i in seq_along(scatter_plots)) {\n  if (i > 2) break\n  print(scatter_plots[[i]])\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-3.png){width=672}\n:::\n:::\n\n\n##Distributions - Histograms\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_histograms_ggplot <- function(data) {\n  # Get numeric variable names\n  numeric_vars <- names(data)[sapply(data, is.numeric)]\n  \n  # Initialize an empty list to store ggplot objects\n  plots <- list()\n  \n  # Loop through each numeric variable and create a histogram using ggplot\n  for (var in numeric_vars) {\n    # Create ggplot object for histogram\n    plot <- ggplot(data, aes_string(x = var)) +\n      geom_histogram(binwidth = 0.5, fill = \"skyblue\", color = \"black\") +\n      labs(title = paste(\"Histogram of\", var), x = var, y = \"Frequency\") +\n      theme_minimal() +\n      theme(plot.title = (element_text(hjust = 0.5)))\n\n    \n    # Append ggplot object to the list\n    plots[[var]] <- plot\n  }\n  \n  return(plots)\n}\n\n# Example call to function\nhist_plots <- create_histograms_ggplot(clean_data)\n\n# Print only the first two plots\nfor (i in seq_along(hist_plots)) {\n  if (i > 2) break\n  print(hist_plots[[i]])\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_data$Rank_Category <- ifelse(clean_data$Rank >= 0 & clean_data$Rank <= 25, \"Ranked\",\n                                   ifelse(clean_data$Rank > 25 & clean_data$Rank <= 181, \"Top 50%\", \"Bottom 50%\"))\nclean_data <- clean_data %>%\n  mutate(Rank_Category = as.factor(Rank_Category))\n\nclean_data$Rank_Category <- factor(clean_data$Rank_Category, levels = c(\"Ranked\", \"Top 50%\", \"Bottom 50%\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(htmlwidgets)\n\nlibrary(plotly)\nX <- subset(clean_data, select = -c(Rank_Category, Win, Loss))\n\nprin_comp <- prcomp(X, center = TRUE, scale. = TRUE)\n\nplot(prin_comp, type = \"l\", main = \"Scree Plot\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsumm <- summary(prin_comp)\nsumm$importance[2,]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    PC1     PC2     PC3     PC4     PC5     PC6     PC7     PC8     PC9    PC10 \n0.41190 0.13812 0.08788 0.06669 0.05603 0.05414 0.04966 0.04583 0.03675 0.03225 \n   PC11    PC12    PC13 \n0.01271 0.00427 0.00378 \n```\n\n\n:::\n\n```{.r .cell-code}\ncomponents <- prin_comp[[\"x\"]]\ncomponents <- data.frame(components)\ncomponents$PC2 <- -components$PC2\ncomponents$PC3 <- -components$PC3\ncomponents = cbind(components, clean_data$Rank_Category)\n\n# Combine components with Ranked labels\ncomponents <- cbind(components, Rank_Category = clean_data$Rank_Category)\n\n# Create Plotly figure\nfig <- plot_ly(components, x = ~PC1, y = ~PC2, z = ~PC3, color = ~Rank_Category,\n               colors = c('#636EFA','#EF553B','#00CC96'), type = \"scatter3d\", mode = \"markers\",\n               marker = list(size = 4))\n\n\n# Customize layout\nfig <- fig %>% layout(\n  title = \"61.67% Variance Explained\",\n  scene = list(bgcolor = \"#e5ecf6\")\n)\n\n# Show the plot\nfig\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-2a90af9c4af478762c2b\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-2a90af9c4af478762c2b\">{\"x\":{\"visdat\":{\"7e147956c2e1\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"7e147956c2e1\",\"attrs\":{\"7e147956c2e1\":{\"x\":{},\"y\":{},\"z\":{},\"mode\":\"markers\",\"marker\":{\"size\":4},\"color\":{},\"colors\":[\"#636EFA\",\"#EF553B\",\"#00CC96\"],\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter3d\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"61.67% Variance Explained\",\"scene\":{\"bgcolor\":\"#e5ecf6\",\"xaxis\":{\"title\":\"PC1\"},\"yaxis\":{\"title\":\"PC2\"},\"zaxis\":{\"title\":\"PC3\"}},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[-6.89064899013395,-5.33755969190233,-5.65821612542968,-5.13387644358991,-5.28450222306681,-4.7054496751526,-5.07183791039416,-4.4128364373174,-4.54490752652098,-3.85696424180693,-3.64596435029169,-4.59221194663536,-3.85939725651384,-3.08716605157026,-2.35922313140159,-4.99846171036629,-3.93576655261316,-3.7140464656473,-2.88687897696252,-2.19167664122357,-4.05284780727803,-2.99907034729789,-3.154748219074,-3.11477291648593,-3.1712023358174],\"y\":[0.94347782402335,-0.276647679056688,2.89932369820089,2.3134683266096,2.25774598904685,1.17676216244454,0.213376625396771,-0.869376524614853,0.277626665263452,-0.967116180904227,0.0269146728007968,-2.77912736095545,-1.02608452522953,1.06242343283746,-0.652509899364951,1.07450349067783,0.428796579424903,-0.609668750120593,1.72153381445753,-0.670638068087561,-0.138296446789865,-1.06881925992364,-0.732876504391632,0.601614740474005,-0.620463775447946],\"z\":[-0.478889751360037,-0.216267048992939,-1.2734546757934,1.59666775188414,0.365964634725233,-0.328720968690304,1.50043147078101,0.701138526566042,0.199274508429045,-0.525815750673588,0.559105306370328,0.157039939502961,0.848071794728088,3.17285317030295,0.255206626369974,-2.08202404622941,-0.718566474355583,0.464299953660467,0.468440940095188,-0.934209258513699,-0.0509165187881984,3.28698216026244,0.607339522627643,0.410275042446833,-1.25571104618061],\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(99,110,250,1)\",\"size\":4,\"line\":{\"color\":\"rgba(99,110,250,1)\"}},\"type\":\"scatter3d\",\"name\":\"Ranked\",\"textfont\":{\"color\":\"rgba(99,110,250,1)\"},\"error_y\":{\"color\":\"rgba(99,110,250,1)\"},\"error_x\":{\"color\":\"rgba(99,110,250,1)\"},\"line\":{\"color\":\"rgba(99,110,250,1)\"},\"frame\":null},{\"x\":[-4.54488863145114,-2.46690159526821,-2.19229089912148,-2.51904965410968,-3.59413643561275,-2.73752434188068,-2.6142874818309,-3.14236378253051,-3.70983679915977,-3.77738151046635,-3.59192548764415,-3.43341423588486,-3.00793184773259,-2.86499326562734,-3.37731058888187,-2.92099329985751,-2.37754230587014,-3.4737519625359,-2.66997051169045,-2.09692073339471,-3.67382033643822,-2.70995718936608,-3.63164346140949,-2.75965590671093,-2.65549147857514,-2.38008742443744,-1.65389018432221,-2.91281411878533,-3.08892275331926,-2.2296675783141,-2.0702271681653,-2.12255444432524,-1.34707831159211,-2.46367818810741,-2.16331260788127,-1.54973249860763,-2.88995090753215,-2.53535995272392,-3.6578117691732,-2.97511376757802,-2.14082875535907,-2.54158354531703,-2.3718159044044,-1.99404393784358,-2.42855338837414,-2.22791603007579,-2.83726456563423,-2.68348376040928,-1.7085817784445,-1.97502853241271,-1.37578317397527,-1.78874821363782,-3.20046156929228,-0.756799032054747,-2.5002987687415,-1.87134515819855,-0.568349415928157,-1.90335892420713,-1.08958829856999,-1.88599714691504,-2.87556643159273,-2.37424116274804,-1.20484321618425,-1.8072238312997,-0.955325965024841,-2.11278946249847,-1.64229980373073,-1.7970825676312,-1.65148404921918,-1.68727709305194,-0.764788710068099,-0.667856932476823,-3.3582293256486,-1.99207214095385,-2.35352946342819,-1.56705641754756,-0.648470240874503,-0.387862001038647,-1.6636536956196,-0.390292802093964,-1.54298554242951,-0.642241062984096,-1.72453767534821,-0.90823435764958,-2.37218684869948,-0.671770831979707,-1.21854750224185,-2.0391116829561,-3.14675210844461,-1.0603528402903,-1.26533681255602,-1.53971037166758,-1.59594599964498,0.250093744981061,-0.36894402543993,-1.82902615238294,-1.47891639052988,-0.466858314158556,-1.06983437020471,-1.12589137137363,-0.0931683951190975,-1.17939202785244,-0.0736487475786731,-0.194154091606334,0.144371830063442,0.237220666002705,-1.26547823003513,-0.166481162823058,0.504149496270682,-0.688416904121899,-0.663244008119946,-1.21583857277894,-1.02455536157749,-0.830015278623821,-0.703016761267281,-1.3136967896792,-1.1518712974529,0.374956251737427,-1.57661305077367,-0.155684079208622,0.0509766916887658,-1.89985226668709,-0.141026428027976,-0.222261045358348,-0.809801091647446,0.100717901139326,-0.4751241012694,0.0541497344084505,-0.314770371695481,1.42819282774576,-0.657725624128404,-0.368539367148055,-0.0445424108385931,0.0678531183932197,0.234696611746672,0.627436685294209,-0.258947268924137,0.460385570720919,-0.400027663496999,-0.495557862361052,-0.790016029474767,-0.142546462714034,-1.0179208188975,0.135719733461253,-0.00937918861905431,0.644137617145509,-0.827256704825366,0.314166605859085,0.602510420365903,1.27155358940545,0.909154331093604,1.42180158552795,-0.342392089524631,-0.731350154178985,1.40214849484054,1.25173491535505],\"y\":[-0.4114982035431,-1.47160490784588,2.46339594560171,1.56129661993332,0.138014909197239,1.47314161552621,-3.61332925596015,0.210526721611844,1.2617469301416,1.98790416696719,1.46681569155993,-0.204959099094045,-2.31878125833959,1.07709883166573,-0.14147819474181,0.523704967900643,-0.159329399038158,-0.465735051539893,-0.581869549793371,1.19610148641113,0.809339497370969,-2.07498109563109,-0.818563615704181,0.470545275618526,0.310062923381308,-0.393117528743133,-1.41746524443806,-0.212714907484806,1.7307902332909,0.186507441539932,-0.677402920572224,-0.30019269323702,-0.786117743191973,-0.971420613142442,-1.37410507152478,0.625402493790458,0.196116049965717,-0.133303099939964,-0.560522025747383,0.110895999648253,0.83631070213785,2.58804270297657,0.798476549494877,2.17201057513869,0.327243686759581,-0.709236469020729,0.904218677326975,2.86590461601865,0.923541748030429,0.271059606480175,1.21628003644931,1.44996794478248,1.14113453958133,-0.980464995778695,0.823488620929906,-0.575168736057616,1.33723801278955,0.178140384720856,-1.03471441384697,1.9405275377495,-2.2978008983329,0.521941814810109,-3.71553145190307,1.40606330623384,0.481546030299853,1.23189334293338,-1.02529116935113,0.372850114716599,-1.24501763429966,0.946594789348065,0.211573209774052,0.693208138444957,-0.61902538643128,-1.4151183424889,1.17645354630893,-1.94927224711875,-0.783818041405789,-0.800224887448554,-2.06874753594447,1.91395195608782,-1.50909551173558,-1.13296529457915,1.04151178005025,0.992984020435296,-0.310979451418985,0.460334736876227,-1.97881733711158,1.04422388364109,-1.28846443486241,1.23702721444973,-1.1276058027164,-0.345299015472878,0.609386029151553,-0.0181284390459534,1.87267289780309,2.93678199537138,-0.383095329740163,-3.13530929679428,-0.7719149942619,-0.524841125280486,-0.704705799613392,-0.34760655341847,-0.985737762186265,-1.94049463021664,-0.136398360174861,0.344870515524042,0.367671048746709,0.323470970393621,-2.57341235334537,-0.0479900260195847,1.32166824641608,0.649079299654085,0.256724553494523,-0.483585169512828,-2.56259377370695,-0.522062315608068,-1.4315521612924,1.20014451809013,-2.07317266558653,1.09870841248975,-2.56672146304037,0.237035169233234,-1.57358462609139,-1.24771258321697,0.126821076073869,-1.62292355818221,-0.411141143049079,0.538601519044155,-1.51871958433553,-3.1833418150186,-1.60773343505643,0.338230303512139,0.668517354571761,1.00198609214586,-0.713793018790569,0.352097546952987,1.11295267653032,-0.101505329683185,-0.882154620767855,1.59781604954329,-1.15814291435105,-0.0299051983837322,-0.689862425589193,-0.212873826476682,0.88404789446165,-2.38010013261946,1.89124304857907,-0.584929958173079,-3.02776835837314,-2.26530704621803,-4.21335444274027,0.113918520066317,0.618414437973686,0.346713124851945,2.05026240176196,2.3529872629356],\"z\":[-1.77815756182051,0.304146514689599,-1.20607207573218,1.95901484356857,0.835144981795874,-0.147040383790161,1.70521520335861,-0.00508862389102829,0.873103958567114,-0.431925609439146,-0.50159315294647,0.343897150354994,-0.91184206018465,-0.601467321848179,-0.421851774844672,-1.26171305022893,-0.234337116568897,-0.454206774571876,-0.637841418649295,0.989724010550651,-1.11552225214014,0.293613152491551,0.957915642493078,-0.347609585340528,-0.029053005446972,-0.0474470125914096,-0.106211692800037,0.0242519643476208,0.517953587912365,-1.24459704635027,1.03822632047354,2.05735902574779,1.96061839776139,-0.419412361145826,0.57888880545643,0.968163364838676,0.274109202951115,1.38405102995478,-2.98703815360622,-0.0762078291032466,0.713269032410645,-0.242766034322483,1.05843761715868,-1.24329243870665,-0.608538426515623,0.570706782627162,-0.784480046890277,0.609204040534633,1.19754541748111,0.733356981934618,-1.17763801933388,0.313602627485104,0.157555322055267,1.28188911004623,0.370013963148205,0.217607059791487,1.72037278504405,0.472387262677176,0.269469461632583,0.443329227559319,-0.631506430351746,-1.29158402042673,-1.10714780436636,-1.99736812186903,1.92303938425516,-0.722444582269548,-0.042818411893949,0.475214350935352,0.340907992090454,0.0402639609977949,0.890565879867107,0.303984061944132,0.0648004440911724,-1.10282366246764,-0.61477620659533,1.38002604297382,-0.598998931867516,3.1375221139515,0.084028841365191,1.7014809602008,-0.895218519738642,0.413483643021246,-2.00483741846676,1.7361451593576,-0.420952008271839,-0.0211802606427305,1.2001303570099,0.215434155754082,-1.75230949209433,-0.249099291225632,2.23523635466385,-0.754078794530061,0.358464951511208,0.704343675896023,1.34763047051395,-0.861316392163091,-1.70958554059131,-1.64671725629811,-0.527192298454577,-0.77512714951796,-0.069399355729021,-1.79597906347153,-0.54578243522502,-0.533913444689437,0.0604713889566894,0.0759517867288012,-1.77467948105458,0.646137734072621,0.8281237677317,0.171769486939957,-0.142988897395856,0.121525301825363,2.09952977409006,0.740334088176683,0.0430121521907023,-1.03882401920773,0.567319865641657,0.98196532694605,-1.39452318960672,1.02255410962227,-0.742002915309296,-0.753216219401584,1.68948253340811,0.827210701873035,0.464394804209374,2.93356563850799,-0.144989970224137,-0.14108018647556,-1.77367088693093,2.65536998305812,-0.127323431836852,0.935477516475835,0.9512326515324,0.907740123183061,-0.192272774198577,-1.06607891739591,0.156738475077564,0.125483190487021,-0.249180191920784,-0.638120200066271,-0.536162100378278,0.525141226942717,-0.12509631349895,1.06106143459491,-0.39802776424511,1.43469829723599,-2.5349956710192,0.00454819146464711,-1.16394603243275,0.11770339568484,1.14882129776733,0.0444819437754789,-0.116169354353998,0.682513008175197,0.658250269253038,1.47036903265787],\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(239,85,59,1)\",\"size\":4,\"line\":{\"color\":\"rgba(239,85,59,1)\"}},\"type\":\"scatter3d\",\"name\":\"Top 50%\",\"textfont\":{\"color\":\"rgba(239,85,59,1)\"},\"error_y\":{\"color\":\"rgba(239,85,59,1)\"},\"error_x\":{\"color\":\"rgba(239,85,59,1)\"},\"line\":{\"color\":\"rgba(239,85,59,1)\"},\"frame\":null},{\"x\":[1.19175423805873,0.647660917008427,0.341008394807907,0.451345224912601,0.0761953972594668,0.618818913945295,-0.496017281125727,0.716183764560382,0.175587478031981,0.162854507217139,0.448302326810145,-0.478157819920829,1.27292510801812,-1.50232658530891,1.73594487538897,0.0698393280346981,-0.0344017729248257,0.441839888202691,0.866583363887609,0.805627813406938,0.154355124471434,0.332879990598695,1.40002243304037,-0.231674920874085,0.227744361240025,1.44432110368982,0.494033031751891,0.49795627020059,0.647882221471206,0.136888167661617,0.190050924719794,0.371760051447205,0.966323074878946,0.790868944085742,0.682622108854589,0.152646357726093,0.708011121121298,0.584725274562276,0.274377802396525,1.66852379682094,1.00690616221388,-0.428606820045016,1.57940061386346,0.23601592090219,1.01386211138878,-0.0916497609479667,1.25097758012715,1.37386734628569,0.723739321712346,0.764184320993493,2.34761041832077,1.03177800304519,1.32197303339661,1.40772038636656,0.45625179018739,0.657290102407202,0.977598197104103,0.884242536705191,1.18345842449315,0.711461523567552,-0.0465149806327423,1.40864144448523,1.08887328113623,-0.184512021371848,1.27542670328416,1.46164825121312,0.475288421936275,1.53092093228813,0.635085480896041,1.09333553425689,2.11087659141449,2.06470208345698,0.658507006544117,0.496247329168023,1.86219929538254,1.26809690793393,1.96715702936702,1.39482023651748,1.09339144164403,1.50666293550529,0.0778615289698545,1.79226107805486,1.0999260502161,2.01125548383846,2.05439850712484,1.60907780345074,0.92619557812583,0.800615947128674,2.23316117688493,2.26293815415298,-0.338547346248491,1.96465285661997,2.13307176053473,2.63252907359625,1.69274676770888,1.92124938418382,0.713902319215873,2.12111057012722,2.35567341068809,1.86609282258608,1.84896576039547,1.61305764610708,2.16113043069487,2.74440217147266,1.21289113385625,1.84324295696694,1.4226890838045,1.27188278940238,1.81999875458296,3.34958760613934,2.0975347712216,0.814302682353871,1.39753198676604,1.83978126453238,1.54158248761759,1.77446153534801,3.42644339223173,2.1591621515758,2.3806938558642,1.78837494410003,2.22801264773691,2.27095793491833,2.68929090693223,2.81112121026165,3.14784523014405,2.37125371945697,2.87043854524713,2.62879525896307,3.29620929918896,1.02105171731209,3.27438738028068,2.08497251756737,2.21078972774449,1.02240702711725,2.50393761367253,1.66846213935434,2.32962389628817,2.6752304795152,2.003844122349,2.5040959608347,2.54374789374081,2.41136697389805,1.80598450464949,2.41643583028224,3.09387504174089,2.80355266502327,2.08593032027132,2.54103625128185,3.63370168091358,4.14127563898704,3.46426105918311,4.68343859884169,3.5353007782208,3.84571396935543,3.35568547043388,2.41561589672063,2.37759645895864,4.19503552338989,2.76976282333632,5.27407823943787,3.87503441861085,3.45319230464859,1.95940313617793,3.20877122959531,3.79865057198027,4.3267472352759,3.59727904060948,3.4139043045223,3.55727509104605,3.73678949998949,4.19482029305363,3.72488342512207,4.57409632737962,3.82941952626109,6.45275724929575,3.51790391465308,5.32656057028675,3.45713059708278,4.87854183967725,5.91756785364386],\"y\":[0.709262895610576,-1.22102498025653,1.89500431088968,2.46673607908351,2.00264496686779,0.733332373288872,0.227401799738699,-0.428114851322977,-1.71874963578036,1.13085427205033,2.22399534834203,-0.152721371536666,-1.03902784950702,0.47989636923441,0.402774980884012,0.552687275223208,0.504731435111382,1.1539258076961,0.74689959601424,-0.867867539695168,-2.54365615200337,-1.512095398891,0.672956160007461,-0.489540840350822,-0.115676051237555,-0.396616426854528,-1.31843772231914,0.289569712735637,2.60499218803671,0.486122587370998,0.534541895120633,-1.77061847016228,0.902538688887067,-1.31948806830261,-1.29146765626013,1.41296846043261,-0.595988290538183,0.689648281298498,2.83773123561323,-0.941287365509274,-1.99024363305719,-0.225876982643732,-2.22182502112019,-1.03597605839811,0.406119794655768,-1.22525437852793,0.832991248929851,-0.982539919015545,0.156856337052798,0.407072904900294,0.00304099217940802,-0.36155556644524,-1.52843988769095,-1.88128434124889,0.278675819912087,-0.422348605769743,1.41648245868753,-0.662085184351933,0.412712954842225,-0.11575363483853,1.87180546607858,-1.20566639684607,-1.75875786263178,-0.462202035874886,-0.856220014433954,0.278705006227384,-0.0404077794320924,-1.47609865766343,-0.359768441667556,-0.691699360166086,0.834915889735355,0.390640315317212,-1.00331013314335,-0.354403750012021,-0.372364143596579,1.19219914490412,0.53382228553741,-1.42023202252996,0.887822323276862,-1.32110374466713,1.63857220514378,-2.20982934506357,-1.01514376862636,-1.05460698363389,-2.18993337400329,1.51691437209765,0.54524220740587,0.265355615054181,-1.26366544464194,-1.09768209160836,1.65238903642188,0.619520666183893,-2.25013701106345,0.291076970172657,1.70511111003065,1.61491097802915,-1.22898146253739,0.100508329664737,1.31942822684018,1.44901596789608,0.5984480716255,0.0339948024539643,1.20252720885177,1.6644611915577,-0.302971975350018,-2.87813812713539,-1.45135656280265,-1.55381154220905,-1.2849543577992,1.46365451429489,2.07048036298339,0.180708020528223,0.607895680719914,-2.30631581485153,-0.0324505520780721,-2.14348440707778,-0.154295166438683,0.738141997153576,-1.91793958240277,-0.198966863416057,0.839803880406346,0.113277574274131,-0.608549330828626,3.29756175399414,1.93944224565441,0.324212890298347,0.920252238634066,-0.213907264150367,-0.307611245084448,0.0958214378373372,-1.012393244468,-0.934086167066812,0.898961921863506,0.644292378915377,-0.782218796088635,1.10726758201089,0.0987247256584502,-2.47871601065712,0.794643971323232,-1.83671686208467,2.20292193333865,1.98677138503306,2.81430335586771,3.60986369559045,1.11412131351189,0.171835802761212,-0.0019359289211237,-2.28436842164899,-1.39196934267272,0.879448353826153,-0.460559245230558,1.05464954253505,0.394738098506949,-1.06576413329367,1.19820210836307,0.441818200050101,-1.87948353416011,0.553972284807698,-1.98812227434992,-0.444641692462663,2.0742681425126,1.0291040056713,-0.221130462925384,2.39864817694502,-0.605667363467268,0.458136627735546,1.11245191060589,0.966583591701811,0.0185230670068535,-0.623452406446112,1.00177337078547,0.863342730963827,-0.79438304146988,0.611029303434159,0.492778254362635,-0.426362436309269,0.00093042604228903,1.79601222404887,2.5699991134566,2.39198217910516],\"z\":[-0.967957191655267,-0.90794444670265,-0.412340514354903,-0.260265193580711,-0.647172838501316,-1.18355913554809,-2.28693334651281,0.0121732851722196,0.980466868758886,-0.642971040294089,0.0436838598194492,0.377034098219287,0.488608952660226,2.40528363944462,-0.319662601107068,0.371085710314743,-0.466291644864284,1.41366380618041,0.350527006892418,-0.176782711378332,1.13296167105733,1.05277315266399,0.814241005636678,-0.0865801382266263,0.792199255438134,-1.29314103882733,-1.23093426382009,1.27732489158893,-0.727865819930803,0.613033537023074,-0.0528720887204778,1.10325730035716,-1.45885092180071,-0.782596203419614,0.198710218791477,-0.15293660147853,1.11044140344134,-0.794852072210015,-1.65450555883646,-0.227966227990036,-0.702941720578639,-0.188222635781756,-0.23195099208497,-1.14550697730452,0.937164251676363,-0.271935923030002,1.10527659663039,-1.25031938791978,-2.10005522985038,0.43506607139379,0.920547082854433,-0.422346258076982,0.778600124003671,0.348712235136272,0.25560776710836,0.522359468529792,-0.118294970424677,-0.811226390713557,0.021692215888964,0.379153758758022,1.03756663128373,-0.440924163235087,-0.143746480216728,-1.43498596654817,-1.28072782768924,1.11472277802277,-1.01937945783785,-0.882562749598453,0.197033043127234,-0.713388220932036,1.63380148552084,1.95907254374475,2.45977087642076,-1.50037905247825,0.377632798091684,-0.922292484674603,0.103834849700681,-0.396353020746439,1.34036706102121,-0.320941028239519,-1.78380248067687,-1.35527842167774,0.417097406229903,-0.720595681311866,1.10387133123399,-0.11349517035301,-0.442588464265184,-0.715786916380186,1.36155842715338,-0.325520459447382,-0.858935353523033,-0.608875112172849,-0.310363929758424,0.873701543226064,-0.115399576631272,0.548162646413876,-0.920584403665892,2.86584500486108,1.69718352836343,-0.324084045769181,-0.122197189305642,-0.984298201396302,0.588975329667991,-0.851478895528883,-1.89547420805308,-0.469747336602647,-0.360282395088637,0.266854327166266,0.974583468604991,-0.777421598359823,0.17730305797227,-3.09954675943212,0.884020462169527,-0.409844305320138,-0.63591025464105,-1.99375777045267,1.84470440445914,-2.12806677820921,-0.769329537050224,-1.84298480505926,0.343196936362596,-1.3820256225193,-0.70243651623176,0.429201531826513,1.18164188935873,-1.01094849840365,0.21110797055804,0.581326937890221,-0.0414654995985055,-1.53219781718967,-0.195727954869349,-0.93402890240401,-1.77100932209758,0.721442331794667,-0.192531165266772,-1.30355284992497,0.301888652743098,-0.293798900858013,-0.157037855023596,0.753680706668488,-0.087971508165186,0.61454359340791,-0.690966691097111,0.959592540746981,-0.302975278912712,0.346246620245141,-0.900802822578682,-1.121937061898,1.97355741364157,1.23225166945316,1.12458528442339,1.2901296867383,0.530938486352665,-0.236179098134685,-0.5875900512952,0.0244187675212083,-2.34878330371574,1.14929573591926,-1.26101539649512,-0.0282990811709981,1.53570084809062,0.526532607117678,-2.69804070435693,-0.66250347042099,-1.64087656863409,-1.0300629211602,-0.128891697066474,0.433676221062521,0.237464931154376,-0.813797449369556,1.02274241490474,-0.932326225343926,0.180786409428613,1.42487719476866,-0.265065902746146,-0.21302373065979,1.22581322635228,-1.48259358950528,-0.415648611725533,-0.970612909518298],\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(0,204,150,1)\",\"size\":4,\"line\":{\"color\":\"rgba(0,204,150,1)\"}},\"type\":\"scatter3d\",\"name\":\"Bottom 50%\",\"textfont\":{\"color\":\"rgba(0,204,150,1)\"},\"error_y\":{\"color\":\"rgba(0,204,150,1)\"},\"error_x\":{\"color\":\"rgba(0,204,150,1)\"},\"line\":{\"color\":\"rgba(0,204,150,1)\"},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n\n```{.r .cell-code}\nsaveWidget(fig, \"interactive_plot.html\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(clean_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [361 × 16] (S3: tbl_df/tbl/data.frame)\n $ Rank         : num [1:361] 1 2 3 4 5 6 7 8 9 10 ...\n $ Win          : num [1:361] 37 34 32 27 27 29 27 27 29 27 ...\n $ Loss         : num [1:361] 3 5 5 8 9 8 9 8 8 9 ...\n $ Def_Eff      : num [1:361] 88.4 91.8 85.5 91.7 88.9 ...\n $ Def_3P       : num [1:361] 29.1 29.9 31.2 30.3 29.7 ...\n $ Def_FG       : num [1:361] 36.9 38.8 36.8 37.6 37.2 ...\n $ Def_MR       : num [1:361] 35.1 34.3 30.8 34.9 30.6 ...\n $ Def_NP       : num [1:361] 45.4 56.7 49.3 45.6 51.8 ...\n $ Off_FTR      : num [1:361] 23.5 17.5 26.4 29.2 25.7 23.1 19.4 19.4 21.7 21 ...\n $ Off_TO       : num [1:361] 14.1 16.2 13.4 14.7 14.3 15 15.7 13.8 13.8 14.1 ...\n $ Off_ORB      : num [1:361] 35.7 36.9 36.8 31.5 31.6 29.8 34.6 31.8 31.7 29.7 ...\n $ Def_DRB      : num [1:361] 23.1 22.8 28.3 28.6 26.4 28.1 20.7 26.4 20.5 24 ...\n $ Off_3P       : num [1:361] 35.8 40.4 34.8 35.2 34.4 35.8 36.6 36.2 35.9 37.7 ...\n $ Off_2P       : num [1:361] 59.1 53.3 49.2 55.1 50.7 51.2 54.4 58.3 50.2 53.5 ...\n $ Pace         : num [1:361] 67.9 70.1 66.4 72.5 71.6 69 76.3 70.7 73.3 68.6 ...\n $ Rank_Category: Factor w/ 3 levels \"Ranked\",\"Top 50%\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(neuralnet)\nlibrary(caret)\nlibrary(tidymodels)\n\nnndata <- clean_data \nset.seed(123)\n# Put 3/4 of the data into the training set \ndata_split <- initial_split(nndata, prop = 3/4, strata = Rank_Category)\n\n# Create data frames for the two sets:\ntrain_data <- training(data_split)\ntest_data  <- testing(data_split)\n\n\nNN <- neuralnet(Rank_Category ~ ., train_data, hidden = c(5,3), linear.output = TRUE)\nplot(NN, rep = \"best\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npredicted_classes <- predict(NN, test_data)\n# Extract predicted class labels\npredicted_classes <- max.col(predicted_classes)\n\n# Convert the indices to class labels\npredicted_classes <- levels(test_data$Rank_Category)[predicted_classes]\nactual_classes <- test_data$Rank_Category\n\npredicted_classes <- factor(predicted_classes, levels = levels(actual_classes))\n\nlength(predicted_classes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 91\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(predicted_classes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] Top 50%    Top 50%    Top 50%    Top 50%    Top 50%    Top 50%   \n [7] Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50%\n[13] Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50%\n[19] Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50%\n[25] Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50%\n[31] Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50%\n[37] Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50%\n[43] Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50% Ranked    \n[49] Bottom 50% Ranked     Ranked     Ranked     Bottom 50% Ranked    \n[55] Ranked     Ranked     Ranked     Ranked     Ranked     Ranked    \n[61] Ranked     Ranked     Ranked     Ranked     Ranked     Ranked    \n[67] Ranked     Ranked     Ranked     Ranked     Ranked     Ranked    \n[73] Ranked     Ranked     Ranked     Ranked     Ranked     Ranked    \n[79] Ranked     Ranked     Ranked     Ranked     Ranked     Ranked    \n[85] Ranked     Ranked     Ranked     Ranked     Ranked     Ranked    \n[91] Ranked    \nLevels: Ranked Top 50% Bottom 50%\n```\n\n\n:::\n\n```{.r .cell-code}\n# Extract actual class labels from the test data\nlength(actual_classes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 91\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(actual_classes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] Ranked     Ranked     Ranked     Ranked     Ranked     Ranked    \n [7] Top 50%    Top 50%    Top 50%    Top 50%    Top 50%    Top 50%   \n[13] Top 50%    Top 50%    Top 50%    Top 50%    Top 50%    Top 50%   \n[19] Top 50%    Top 50%    Top 50%    Top 50%    Top 50%    Top 50%   \n[25] Top 50%    Top 50%    Top 50%    Top 50%    Top 50%    Top 50%   \n[31] Top 50%    Top 50%    Top 50%    Top 50%    Top 50%    Top 50%   \n[37] Top 50%    Top 50%    Top 50%    Top 50%    Top 50%    Top 50%   \n[43] Top 50%    Top 50%    Top 50%    Top 50%    Top 50%    Bottom 50%\n[49] Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50%\n[55] Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50%\n[61] Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50%\n[67] Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50%\n[73] Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50%\n[79] Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50%\n[85] Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50% Bottom 50%\n[91] Bottom 50%\nLevels: Ranked Top 50% Bottom 50%\n```\n\n\n:::\n\n```{.r .cell-code}\n# Create a confusion matrix\nconfusionMatrix(predicted_classes, test_data$Rank_Category)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion Matrix and Statistics\n\n            Reference\nPrediction   Ranked Top 50% Bottom 50%\n  Ranked          0       0         42\n  Top 50%         6       0          0\n  Bottom 50%      0      41          2\n\nOverall Statistics\n                                          \n               Accuracy : 0.022           \n                 95% CI : (0.0027, 0.0771)\n    No Information Rate : 0.4835          \n    P-Value [Acc > NIR] : 1               \n                                          \n                  Kappa : -0.3748         \n                                          \n Mcnemar's Test P-Value : <2e-16          \n\nStatistics by Class:\n\n                     Class: Ranked Class: Top 50% Class: Bottom 50%\nSensitivity                0.00000        0.00000           0.04545\nSpecificity                0.50588        0.88000           0.12766\nPos Pred Value             0.00000        0.00000           0.04651\nNeg Pred Value             0.87755        0.51765           0.12500\nPrevalence                 0.06593        0.45055           0.48352\nDetection Rate             0.00000        0.00000           0.02198\nDetection Prevalence       0.46154        0.06593           0.47253\nBalanced Accuracy          0.25294        0.44000           0.08656\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(test_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [91 × 16] (S3: tbl_df/tbl/data.frame)\n $ Rank         : num [1:91] 3 4 19 21 24 25 27 30 34 36 ...\n $ Win          : num [1:91] 32 27 20 24 21 22 21 23 26 22 ...\n $ Loss         : num [1:91] 5 8 13 12 13 11 14 11 10 15 ...\n $ Def_Eff      : num [1:91] 85.5 91.7 98.7 97.2 95.2 ...\n $ Def_3P       : num [1:91] 31.2 30.3 34.1 31.2 32.5 ...\n $ Def_FG       : num [1:91] 36.8 37.6 41.3 39 41.1 ...\n $ Def_MR       : num [1:91] 30.8 34.9 34.9 40.6 35.6 ...\n $ Def_NP       : num [1:91] 49.3 45.6 52.3 47.7 53.2 ...\n $ Off_FTR      : num [1:91] 26.4 29.2 24.8 24.5 24.6 22.7 22.5 21.2 23.9 21.6 ...\n $ Off_TO       : num [1:91] 13.4 14.7 15.3 14.5 16.5 13.2 15.1 15.4 13.7 17 ...\n $ Off_ORB      : num [1:91] 36.8 31.5 37 25.5 27.8 29.1 23.6 25.8 31.2 35.1 ...\n $ Def_DRB      : num [1:91] 28.3 28.6 27.5 23.9 27.2 21.4 23.6 28.7 24.9 22.9 ...\n $ Off_3P       : num [1:91] 34.8 35.2 34.1 35.1 35.5 35.7 36.4 35.7 32.7 33 ...\n $ Off_2P       : num [1:91] 49.2 55.1 50.8 54.7 53 50 54 52.8 51.1 50.9 ...\n $ Pace         : num [1:91] 66.4 72.5 71.5 69.7 70.3 68.4 70.9 71.6 74.2 70.9 ...\n $ Rank_Category: Factor w/ 3 levels \"Ranked\",\"Top 50%\",..: 1 1 1 1 1 1 2 2 2 2 ...\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#libs\nlibrary(janitor)\nlibrary(tidymodels)\nlibrary(caret)\nlibrary(pROC)\nlibrary(data.table)\nlibrary(kableExtra)\n```\n:::\n\n\n### final data cleaning\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(clean_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [361 × 16] (S3: tbl_df/tbl/data.frame)\n $ Rank         : num [1:361] 1 2 3 4 5 6 7 8 9 10 ...\n $ Win          : num [1:361] 37 34 32 27 27 29 27 27 29 27 ...\n $ Loss         : num [1:361] 3 5 5 8 9 8 9 8 8 9 ...\n $ Def_Eff      : num [1:361] 88.4 91.8 85.5 91.7 88.9 ...\n $ Def_3P       : num [1:361] 29.1 29.9 31.2 30.3 29.7 ...\n $ Def_FG       : num [1:361] 36.9 38.8 36.8 37.6 37.2 ...\n $ Def_MR       : num [1:361] 35.1 34.3 30.8 34.9 30.6 ...\n $ Def_NP       : num [1:361] 45.4 56.7 49.3 45.6 51.8 ...\n $ Off_FTR      : num [1:361] 23.5 17.5 26.4 29.2 25.7 23.1 19.4 19.4 21.7 21 ...\n $ Off_TO       : num [1:361] 14.1 16.2 13.4 14.7 14.3 15 15.7 13.8 13.8 14.1 ...\n $ Off_ORB      : num [1:361] 35.7 36.9 36.8 31.5 31.6 29.8 34.6 31.8 31.7 29.7 ...\n $ Def_DRB      : num [1:361] 23.1 22.8 28.3 28.6 26.4 28.1 20.7 26.4 20.5 24 ...\n $ Off_3P       : num [1:361] 35.8 40.4 34.8 35.2 34.4 35.8 36.6 36.2 35.9 37.7 ...\n $ Off_2P       : num [1:361] 59.1 53.3 49.2 55.1 50.7 51.2 54.4 58.3 50.2 53.5 ...\n $ Pace         : num [1:361] 67.9 70.1 66.4 72.5 71.6 69 76.3 70.7 73.3 68.6 ...\n $ Rank_Category: Factor w/ 3 levels \"Ranked\",\"Top 50%\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nDATA <- clean_data %>% \n  select(-Rank)\n```\n:::\n\n\n### data budgeting\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nDATA_SPLIT <- DATA %>%\n  initial_split(strata = Rank_Category)\n\nDATA_TRAIN <- training(DATA_SPLIT)\nDATA_TEST <- testing(DATA_SPLIT)\n\nset.seed(234)\nDATA_folds <- vfold_cv(DATA_TRAIN, strata = Rank_Category)\nDATA_folds\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#  10-fold cross-validation using stratification \n# A tibble: 10 × 2\n   splits           id    \n   <list>           <chr> \n 1 <split [242/28]> Fold01\n 2 <split [242/28]> Fold02\n 3 <split [242/28]> Fold03\n 4 <split [242/28]> Fold04\n 5 <split [243/27]> Fold05\n 6 <split [243/27]> Fold06\n 7 <split [244/26]> Fold07\n 8 <split [244/26]> Fold08\n 9 <split [244/26]> Fold09\n10 <split [244/26]> Fold10\n```\n\n\n:::\n:::\n\n\n### prepping recipe\n\n::: {.cell}\n\n```{.r .cell-code}\nDATA_rec <-\n  recipe(Rank_Category ~ ., data = DATA_TRAIN) %>%\n  step_unknown(all_nominal_predictors()) %>%\n  step_dummy(all_nominal_predictors(), one_hot = TRUE)\n\nprep(DATA_rec) # checking prep\n```\n:::\n\n\n\n### tuning model\n\n::: {.cell}\n\n```{.r .cell-code}\nxgb_spec <-\n  boost_tree(\n    trees = tune(),\n    min_n = tune(),\n    mtry = tune(),\n    tree_depth = tune(),\n    learn_rate = tune(),\n    loss_reduction = tune()) %>%\n  set_engine(\"xgboost\") %>%\n  set_mode(\"classification\")\n\n#workflow\nxgb_workfl <- workflow(DATA_rec, xgb_spec)\n```\n:::\n\n\n### racing \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(finetune)\ndoParallel::registerDoParallel()\n\nset.seed(345)\nxgb_rs <- tune_race_anova(\n  xgb_workfl,\n  resamples = DATA_folds,\n  grid = 20,\n  metrics = metric_set(accuracy),\n  control = control_race(verbose_elim = TRUE)\n)\n```\n:::\n\n\n### Comparing models\n\n::: {.cell}\n\n```{.r .cell-code}\nanova <- plot_race(xgb_rs)\n\nanova +\n  labs(title = \"Model Race ANOVA\",\n       y = \"Model Accuracy\") +\n  theme_minimal() +\n  theme(plot.title = (element_text(hjust = 0.5)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_best(xgb_rs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 12\n   mtry trees min_n tree_depth learn_rate loss_reduction .metric  .estimator\n  <int> <int> <int>      <int>      <dbl>          <dbl> <chr>    <chr>     \n1     7   502     8          5     0.310        3.53e-10 accuracy multiclass\n2    12  1597    11          1     0.0191       2.36e- 1 accuracy multiclass\n3    14   908     8          6     0.0292       8.29e- 1 accuracy multiclass\n4     3   724    24         10     0.155        2.41e- 2 accuracy multiclass\n# ℹ 4 more variables: mean <dbl>, n <int>, std_err <dbl>, .config <chr>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nxgb_last <- xgb_workfl %>%\n  finalize_workflow(select_best(xgb_rs, metric = \"accuracy\")) %>%\n  last_fit(DATA_SPLIT)\n\nxgb_last$.metrics\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n# A tibble: 3 × 4\n  .metric     .estimator .estimate .config             \n  <chr>       <chr>          <dbl> <chr>               \n1 accuracy    multiclass     0.791 Preprocessor1_Model1\n2 roc_auc     hand_till      0.918 Preprocessor1_Model1\n3 brier_class multiclass     0.144 Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nDATA_pred <- collect_predictions(xgb_last)$.pred_class\n\nDATA_act <- DATA_TEST$Rank_Category\n\nconfusionMatrix(DATA_pred, DATA_act)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion Matrix and Statistics\n\n            Reference\nPrediction   Ranked Top 50% Bottom 50%\n  Ranked          2       2          0\n  Top 50%         4      34          8\n  Bottom 50%      0       5         36\n\nOverall Statistics\n                                          \n               Accuracy : 0.7912          \n                 95% CI : (0.6933, 0.8694)\n    No Information Rate : 0.4835          \n    P-Value [Acc > NIR] : 1.596e-09       \n                                          \n                  Kappa : 0.6214          \n                                          \n Mcnemar's Test P-Value : NA              \n\nStatistics by Class:\n\n                     Class: Ranked Class: Top 50% Class: Bottom 50%\nSensitivity                0.33333         0.8293            0.8182\nSpecificity                0.97647         0.7600            0.8936\nPos Pred Value             0.50000         0.7391            0.8780\nNeg Pred Value             0.95402         0.8444            0.8400\nPrevalence                 0.06593         0.4505            0.4835\nDetection Rate             0.02198         0.3736            0.3956\nDetection Prevalence       0.04396         0.5055            0.4505\nBalanced Accuracy          0.65490         0.7946            0.8559\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vip)\nvip <- extract_workflow(xgb_last) %>%\n  extract_fit_parsnip() %>%\n  vip(geom = \"col\", num_features = 10, mapping = aes(fill = Variable))\nvip \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_fit <- extract_fit_engine(xgb_last)\nlibrary(DiagrammeR)\nxgb.plot.tree(model = tree_fit, trees = 0)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"grViz html-widget html-fill-item\" id=\"htmlwidget-cba8c84480128000498d\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-cba8c84480128000498d\">{\"x\":{\"diagram\":\"digraph {\\n\\ngraph [layout = \\\"dot\\\",\\n       rankdir = \\\"LR\\\"]\\n\\nnode [color = \\\"DimGray\\\",\\n      style = \\\"filled\\\",\\n      fontname = \\\"Helvetica\\\"]\\n\\nedge [color = \\\"DimGray\\\",\\n     arrowsize = \\\"1.5\\\",\\n     arrowhead = \\\"vee\\\",\\n     fontname = \\\"Helvetica\\\"]\\n\\n  \\\"1\\\" [label = \\\"Tree 0\\nWin\\nCover: 119.999992\\nGain: 12.4835739\\\", fillcolor = \\\"Beige\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\"] \\n  \\\"2\\\" [label = \\\"Def_Eff\\nCover: 110.666656\\nGain: 1.54277039\\\", fillcolor = \\\"Beige\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\"] \\n  \\\"3\\\" [label = \\\"Leaf\\nCover: 9.33333302\\nValue: 0.149944708\\\", fillcolor = \\\"Khaki\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\"] \\n  \\\"4\\\" [label = \\\"Off_TO\\nCover: 21.7777767\\nGain: 1.62855339\\\", fillcolor = \\\"Beige\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\"] \\n  \\\"5\\\" [label = \\\"Leaf\\nCover: 88.8888855\\nValue: -0.229828745\\\", fillcolor = \\\"Khaki\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\"] \\n  \\\"6\\\" [label = \\\"Leaf\\nCover: 8.88888836\\nValue: -0.0208911877\\\", fillcolor = \\\"Khaki\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\"] \\n  \\\"7\\\" [label = \\\"Leaf\\nCover: 12.8888884\\nValue: -0.193368718\\\", fillcolor = \\\"Khaki\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\"] \\n\\\"1\\\"->\\\"2\\\" [label = \\\"< 25.5\\\", style = \\\"bold\\\"] \\n\\\"2\\\"->\\\"4\\\" [label = \\\"< 101.205002\\\", style = \\\"bold\\\"] \\n\\\"4\\\"->\\\"6\\\" [label = \\\"< 15.75\\\", style = \\\"bold\\\"] \\n\\\"1\\\"->\\\"3\\\" [style = \\\"bold\\\", style = \\\"solid\\\"] \\n\\\"2\\\"->\\\"5\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"4\\\"->\\\"7\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"../site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"../site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n<script src=\"../site_libs/viz-1.8.2/viz.js\"></script>\n<link href=\"../site_libs/DiagrammeR-styles-0.2/styles.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/grViz-binding-1.0.11/grViz.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}